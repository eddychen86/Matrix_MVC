@model Matrix.ViewModels.RegisterViewModel
@inject IStringLocalizerFactory LocalizerFactory
@{
    var Localizer = LocalizerFactory.Create("Views.Auth.Auth", "Matrix");
}
@{
    ViewData["Title"] = Localizer["RegisterTitle"];
    Layout = "~/Views/Shared/_AuthLayout.cshtml";

    var userNamePlaceholder = Localizer["UserNamePlaceholder"];
    var emailPlaceholder = Localizer["EmailPlaceholder"];
    var passwordPlaceholder = Localizer["PasswordPlaceholder"];
    var confirmPasswordPlaceholder = Localizer["ConfirmPasswordPlaceholder"];
}

@section Styles {
    <style>
        .email-options-popup,
        .email-error-popup {
            max-width: 450px;
            min-width: 350px;
        }

        .popup-actions {
            padding: 0 16px 16px 16px;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .popup-btn {
            padding: 8px 16px;
            border-radius: 6px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s;
        }

        .popup-btn.primary {
            background-color: #FF4C29;
            color: white;
        }

        .popup-btn.primary:hover {
            background-color: #E03E1F;
        }

        .popup-btn.secondary {
            background-color: #F3F4F6;
            color: #374151;
            border: 1px solid #D1D5DB;
        }

        .popup-btn.secondary:hover {
            background-color: #E5E7EB;
        }

        .popup-message h4 {
            margin: 0 0 8px 0;
            font-size: 16px;
            font-weight: 600;
            color: #111827;
        }

        .popup-message p {
            margin: 0;
            font-size: 14px;
            line-height: 1.4;
            color: #6B7280;
        }
    </style>
}

<div id="auth-body">
    <div id="auth-form">
        <div id="mock"></div>
        <form method="POST" class="w-4/5 md:w-3/4 lg:w-1/2" v-on:submit="submitForm">
            @Html.AntiForgeryToken()
            <h1>@ViewData["Title"]</h1>
            <p class="text-center subTitle">@Localizer["WelcomeMsg"]</p>

            @* 用戶名 *@
            <div class="input-item">
                <label for="UserName" class="subTitle">@Localizer["UserNameLabel"]</label>
                <input type="text" asp-for="UserName" placeholder="@userNamePlaceholder">
                <p asp-validation-for="UserName" class="text-red-400 para"></p>
            </div>

            @* 信箱 *@
            <div class="input-item">
                <label for="Email" class="subTitle">@Localizer["EmailLabel"]</label>
                <input type="text" asp-for="Email" placeholder="@emailPlaceholder">
                <p asp-validation-for="Email" class="text-red-400 para"></p>
            </div>
            
            @* 密碼 *@
            <div class="input-item">
                <label for="Password" class="subTitle">@Localizer["PasswordLabel"]</label>
                <div class="input-item_pwd">
                    <input :type="showPassword ? 'text' : 'password'" asp-for="Password" placeholder="@passwordPlaceholder">
                    <button type="button" v-on:click="togglePasswordVisibility">
                        <i :data-lucide="showPassword ? 'eye' : 'eye-closed'" class="text-secondary subTitle"></i>
                    </button>
                </div>
                <p asp-validation-for="Password" class="text-red-400 para"></p>
            </div>

            @* 確認密碼 *@
            <div class="input-item">
                <label for="ConfirmPassword" class="subTitle">@Localizer["ConfirmPasswordLabel"]</label>
                <div class="input-item_pwd">
                    <input :type="showConfirmPassword ? 'text' : 'password'" asp-for="PasswordConfirm" placeholder="@confirmPasswordPlaceholder">
                    <button type="button" v-on:click="toggleConfirmPasswordVisibility">
                        <i :data-lucide="showConfirmPassword ? 'eye' : 'eye-closed'" class="text-secondary subTitle"></i>
                    </button>
                </div>
                <p asp-validation-for="ConfirmPassword" class="text-red-400 para"></p>
            </div>

            @* 註冊按鈕 *@
            <button type="submit" class="auth-btn subTitle py-2">@Localizer["SubmitBtn"]</button>
            
            @* 已有帳號 *@
            <p class="para text-center">@Localizer["hasAccountMsg"] <a href="/login" class="font-semibold">@Localizer["LoginTitle"]</a></p>
        </form>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const { createApp, ref, onMounted } = Vue;

        createApp({
            setup() {
                // 響應式數據
                const showPassword = ref(false);
                const showConfirmPassword = ref(false);
                const registerForm = ref({
                    UserName: '',
                    Email: '',
                    Password: '',
                    PasswordConfirm: ''
                });

                // 切換密碼顯示/隱藏
                const togglePasswordVisibility = () => {
                    showPassword.value = !showPassword.value;
                    setTimeout(() => lucide.createIcons(), 0);
                };

                const toggleConfirmPasswordVisibility = () => {
                    showConfirmPassword.value = !showConfirmPassword.value;
                    setTimeout(() => lucide.createIcons(), 0);
                };

                // 更新錯誤訊息
                const updateErrorMsg = (errors) => {
                    // 清除之前的錯誤訊息
                    document.querySelectorAll('.input-item p').forEach(p => p.textContent = '');

                    Object.keys(errors).forEach(field => {
                        const errMsg = errors[field];
                        if (errMsg && errMsg.length > 0) {
                            const el = document.querySelector(`p[asp-validation-for="${field}"]`);
                            if (el && field) {
                                el.textContent = errMsg[0];
                            } else if (!field) {
                                console.log('General error:', errMsg[0]);
                            } else {
                                console.log(`Could not find validation element for ${field}`);
                            }
                        }
                    });
                };

                // 表單提交
                const submitForm = async (event) => {
                    event.preventDefault();

                    try {
                        // 獲取表單數據
                        const formData = new FormData(event.target);
                        const token = formData.get('__RequestVerificationToken');

                        const response = await fetch('/api/register', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({
                                UserName: registerForm.value.UserName,
                                Email: registerForm.value.Email,
                                Password: registerForm.value.Password,
                                PasswordConfirm: registerForm.value.PasswordConfirm
                            })
                        });

                        const result = await response.json();

                        if (result.success && result.redirectUrl) {
                            // 檢查是否有郵件發送標記
                            if (result.emailSent) {
                                // 方案一：伺服器已發送確認信，但我們要在前端再次確認或重新發送
                                showCustomPopup(
                                    result.message || '註冊成功！',
                                    'success'
                                );

                                // 詢問用戶是否需要重新發送確認信
                                setTimeout(() => {
                                    showEmailConfirmationOptions(result);
                                }, 2000);

                            } else if (result.needEmailConfirmation) {
                                // 方案二：需要前端發送確認信
                                await handleEmailConfirmation(result, token);

                            } else if (result.redirectUrl) {
                                // 一般成功情況
                                if (result.message) {
                                    showCustomPopup(result.message, 'success');
                                    setTimeout(() => {
                                        window.location.href = result.redirectUrl;
                                    }, 3000);
                                } else {
                                    window.location.href = result.redirectUrl;
                                }
                            }
                        } else if (result.errors) {
                            updateErrorMsg(result.errors);
                        } else {
                            throw new Error(result.message || '註冊失敗');
                        }
                    } catch (error) {
                        console.error('Register error:', error);
                    }
                };

                // 顯示郵件確認選項
                const showEmailConfirmationOptions = (registerResult) => {
                    const popup = document.createElement('div');
                    popup.className = 'custom-popup custom-popup-info email-options-popup';

                    popup.innerHTML = `
                        <div class="popup-content">
                            <div class="popup-icon">
                                <i data-lucide="mail" style="color: #3B82F6"></i>
                            </div>
                            <div class="popup-message">
                                <h4>確認信已發送</h4>
                                <p>我們已經將確認信發送到您的郵箱。如果您沒有收到，可以：</p>
                            </div>
                        </div>
                        <div class="popup-actions">
                            <button class="popup-btn secondary" onclick="checkEmail()">
                                <i data-lucide="external-link"></i>
                                前往登入
                            </button>
                            <button class="popup-btn primary" onclick="resendEmail()">
                                <i data-lucide="refresh-cw"></i>
                                重新發送
                            </button>
                        </div>
                    `;

                    // 添加全域函數
                    window.checkEmail = () => {
                        popup.remove();
                        window.location.href = '/login';
                    };

                    window.resendEmail = async () => {
                        popup.remove();

                        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                        await handleEmailConfirmation({ needEmailConfirmation: true }, token);
                    };

                    document.body.appendChild(popup);
                    setTimeout(() => lucide.createIcons(), 0);
                };

                // 處理確認信發送（改進版）
                const handleEmailConfirmation = async (registerResult, token) => {
                    // 顯示loading popup
                    const loadingPopup = showCustomPopup('正在發送確認信...', 'loading');

                    try {
                        const emailResponse = await fetch('/api/auth/SendConfirmationEmail', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({
                                UserName: registerForm.value.UserName,
                                Email: registerForm.value.Email,
                                Password: registerForm.value.Password,
                                PasswordConfirm: registerForm.value.PasswordConfirm
                            })
                        });

                        const emailResult = await emailResponse.json();

                        // 關閉 loading popup
                        if (loadingPopup && loadingPopup.parentElement) {
                            loadingPopup.remove();
                        }

                        if (emailResult.success) {
                            showCustomPopup(
                                '確認信發送成功！請檢查您的郵箱並點擊確認連結。',
                                'success',
                                () => {
                                    window.location.href = '/login';
                                }
                            );
                        } else {
                            showEmailErrorPopup(emailResult.message);
                        }

                    } catch (emailError) {
                        console.error('發送確認信失敗:', emailError);

                        // 關閉 loading popup
                        if (loadingPopup && loadingPopup.parentElement) {
                            loadingPopup.remove();
                        }

                        showEmailErrorPopup('網路錯誤，請稍後再試。');
                    }
                };

                // 顯示郵件發送錯誤 popup
                const showEmailErrorPopup = (errorMessage) => {
                    const popup = document.createElement('div');
                    popup.className = 'custom-popup custom-popup-warning email-error-popup';

                    popup.innerHTML = `
                        <div class="popup-content">
                            <div class="popup-icon">
                                <i data-lucide="alert-triangle" style="color: #D97706"></i>
                            </div>
                            <div class="popup-message">
                                <h4>確認信發送失敗</h4>
                                <p>${errorMessage || '發送確認信時發生錯誤，請稍後重試。'}</p>
                            </div>
                        </div>
                        <div class="popup-actions">
                            <button class="popup-btn secondary" onclick="skipToLogin()">
                                直接登入
                            </button>
                            <button class="popup-btn primary" onclick="retryEmail()">
                                <i data-lucide="refresh-cw"></i>
                                重試
                            </button>
                        </div>
                    `;

                    // 添加全域函數
                    window.skipToLogin = () => {
                        popup.remove();
                        window.location.href = '/login';
                    };

                    window.retryEmail = async () => {
                        popup.remove();
                        const token =
                document.querySelector('input[name="__RequestVerificationToken"]').value;
                        await handleEmailConfirmation({ needEmailConfirmation: true }, token);
                    };

                    document.body.appendChild(popup);
                    setTimeout(() => lucide.createIcons(), 0);
                };

                // 改進的客製化 popup 函數
                const showCustomPopup = (message, type = 'info', callback = null) => {
                    const popup = document.createElement('div');
                    popup.className = `custom-popup custom-popup-${type}`;

                    const icons = {
                        success: 'check-circle',
                        error: 'x-circle',
                        warning: 'alert-triangle',
                        loading: 'loader',
                        info: 'info'
                    };

                    const colors = {
                        success: '#059669',
                        error: '#DC2626',
                        warning: '#D97706',
                        loading: '#3B82F6',
                        info: '#6B7280'
                    };

                    popup.innerHTML = `
                        <div class="popup-content">
                            <div class="popup-icon">
                                <i data-lucide="${icons[type]}" style="color: ${colors[type]}"></i>
                            </div>
                            <div class="popup-message">${message}</div>
                            ${type !== 'loading' ? `
                                <button class="popup-close" 
                onclick="this.parentElement.parentElement.remove()">
                                    <i data-lucide="x"></i>
                                </button>
                            ` : ''}
                        </div>
                    `;

                    document.body.appendChild(popup);
                    setTimeout(() => lucide.createIcons(), 0);

                    if (callback) {
                        setTimeout(() => {
                            if (popup.parentElement) {
                                popup.remove();
                            }
                            callback();
                        }, 3000);
                    } else if (type !== 'loading') {
                        setTimeout(() => {
                            if (popup.parentElement) {
                                popup.remove();
                            }
                        }, 5000);
                    }

                    return popup; // 返回 popup 元素以便後續操作
                };

                // 組件掛載後初始化
                onMounted(() => {
                    // 綁定表單數據到 DOM 元素
                    const userNameInput = document.querySelector('input[name="UserName"]');
                    const emailInput = document.querySelector('input[name="Email"]');
                    const passwordInput = document.querySelector('input[name="Password"]');
                    const confirmPasswordInput = document.querySelector('input[name="PasswordConfirm"]');

                    if (userNameInput) {
                        userNameInput.addEventListener('input', (e) => {
                            registerForm.value.UserName = e.target.value;
                        });
                    }

                    if (emailInput) {
                        emailInput.addEventListener('input', (e) => {
                            registerForm.value.Email = e.target.value;
                        });
                    }

                    if (passwordInput) {
                        passwordInput.addEventListener('input', (e) => {
                            registerForm.value.Password = e.target.value;
                        });
                    }

                    if (confirmPasswordInput) {
                        confirmPasswordInput.addEventListener('input', (e) => {
                            registerForm.value.PasswordConfirm = e.target.value;
                        });
                    }

                    // 初始化 Lucide 圖標
                    lucide.createIcons();
                });

                return {
                    showPassword,
                    showConfirmPassword,
                    registerForm,
                    togglePasswordVisibility,
                    toggleConfirmPasswordVisibility,
                    submitForm
                };
            }
        }).mount('#auth-body');
    </script>
}