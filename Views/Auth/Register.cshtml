@model Matrix.ViewModels.RegisterViewModel
@inject IStringLocalizerFactory LocalizerFactory
@{
    var Localizer = LocalizerFactory.Create("Views.Auth.Auth", "Matrix");
}
@{
    ViewData["Title"] = Localizer["RegisterTitle"];
    Layout = "~/Views/Shared/_AuthLayout.cshtml";

    var userNamePlaceholder = Localizer["UserNamePlaceholder"];
    var emailPlaceholder = Localizer["EmailPlaceholder"];
    var passwordPlaceholder = Localizer["PasswordPlaceholder"];
    var confirmPasswordPlaceholder = Localizer["ConfirmPasswordPlaceholder"];
}

<div id="auth-body">
    <div id="auth-form">
        <div id="mock"></div>
        <form method="POST" class="w-4/5 md:w-3/4 lg:w-1/2" v-on:submit="submitForm">
            @Html.AntiForgeryToken()
            <h1>@ViewData["Title"]</h1>
            <p class="text-center subTitle">@Localizer["WelcomeMsg"]</p>

            @* 用戶名 *@
            <div class="input-item">
                <label for="UserName" class="subTitle">@Localizer["UserNameLabel"]</label>
                <input type="text" asp-for="UserName" placeholder="@userNamePlaceholder">
                <p asp-validation-for="UserName" class="text-red-400 para"></p>
            </div>

            @* 信箱 *@
            <div class="input-item">
                <label for="Email" class="subTitle">@Localizer["EmailLabel"]</label>
                <input type="text" asp-for="Email" placeholder="@emailPlaceholder">
                <p asp-validation-for="Email" class="text-red-400 para"></p>
            </div>
            
            @* 密碼 *@
            <div class="input-item">
                <label for="Password" class="subTitle">@Localizer["PasswordLabel"]</label>
                <div class="input-item_pwd">
                    <input :type="showPassword ? 'text' : 'password'" asp-for="Password" placeholder="@passwordPlaceholder">
                    <button type="button" v-on:click="togglePasswordVisibility">
                        <i :data-lucide="showPassword ? 'eye' : 'eye-closed'" class="text-secondary subTitle"></i>
                    </button>
                </div>
                <p asp-validation-for="Password" class="text-red-400 para"></p>
            </div>

            @* 確認密碼 *@
            <div class="input-item">
                <label for="ConfirmPassword" class="subTitle">@Localizer["ConfirmPasswordLabel"]</label>
                <div class="input-item_pwd">
                    <input :type="showConfirmPassword ? 'text' : 'password'" asp-for="PasswordConfirm" placeholder="@confirmPasswordPlaceholder">
                    <button type="button" v-on:click="toggleConfirmPasswordVisibility">
                        <i :data-lucide="showConfirmPassword ? 'eye' : 'eye-closed'" class="text-secondary subTitle"></i>
                    </button>
                </div>
                <p asp-validation-for="ConfirmPassword" class="text-red-400 para"></p>
            </div>

            @* 註冊按鈕 *@
            <button type="submit" class="auth-btn subTitle py-2">@Localizer["SubmitBtn"]</button>
            
            @* 已有帳號 *@
            <p class="para text-center">@Localizer["hasAccountMsg"] <a href="/login" class="font-semibold">@Localizer["LoginTitle"]</a></p>
        </form>
    </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // ========== jQuery 代碼 (已註解) ==========
        /*
        const updateErrorMsg = err => {
            const authError = $('#auth-error-register p');
            const isHidden = $('#auth-error-register').hasClass('hidden')

            // 清除之前的錯誤訊息
            $('.input-item p').text('');

            if (!isHidden) $('#auth-error-register').addClass('hidden')

            Object.keys(err).forEach(field => {
                const errMsg = err[field];

                // console.log(`err: ${err}\nfield: ${field}\nerrMsg: ${errMsg}`)

                if (errMsg && errMsg.length > 0) {
                    // 嘗試多種選擇器來找到驗證元素
                    let el = $(`p[asp-validation-for="${field}"]`)

                    if (el.length > 0 && field) {
                        el.text(errMsg[0])
                    } else if (el.length > 0 && !field) {
                        $('#auth-error-register').removeClass('hidden')
                        authError.text(errMsg[0])
                    } else
                        console.log(`Could not find validation element for ${field}`)
                }
            });
        }
        
        // 密碼顯示／隱藏功能
        const togglePwdView = (id, pwd) => {
            $(id).on('click', function() {
                const type = $(pwd).attr('type') === 'password' ? 'text' : 'password';
                $(pwd).attr('type', type);
                const icon = type === 'password'
                    ? '<i data-lucide="eye-closed" class="text-secondary subTitle"></i>'
                    : '<i data-lucide="eye" class="text-secondary subTitle"></i>';
                $(this).html(icon);
                lucide.createIcons()
            })
        }

        $(document).ready(() => {
            togglePwdView('#private-btn', '#Password');
            togglePwdView('#confirm-private-btn', '#PasswordConfirm');

            $('form').on('submit', async e => {
                // 阻止表單提交
                e.preventDefault()

                try {
                    // 獲取 anti-forgery token
                    const token = $('input[name="__RequestVerificationToken"]').val();
                    
                    // 使用 AJAX 與 async/await 送到 /api/login
                    const res = await $.ajax({
                        url: '/api/register',
                        type: 'POST',
                        contentType: 'application/json',
                        headers: { 'RequestVerificationToken': token },
                        data: JSON.stringify({
                            UserName: $('#UserName').val(),
                            Email: $('#Email').val(),
                            Password: $('#Password').val(),
                            PasswordConfirm: $('#PasswordConfirm').val(),
                        })
                    })

                    if (res.success && res.redirectUrl)
                        window.location.href = res.redirectUrl
                    else (res.errors)
                        updateErrorMsg(res.errors)
                } catch (error) {                    
                    if (error.status === 400 && error.responseJSON && error.responseJSON.errors) {
                        // 顯示各欄位的驗證錯誤
                        const errors = error.responseJSON.errors;
                        updateErrorMsg(errors)
                    }
                }
            });
        });
        */

        // ========== Vue.js 應用程式 ==========
        const { createApp, ref, onMounted } = Vue;

        createApp({
            setup() {
                // 響應式數據
                const showPassword = ref(false);
                const showConfirmPassword = ref(false);
                const registerForm = ref({
                    UserName: '',
                    Email: '',
                    Password: '',
                    PasswordConfirm: ''
                });

                // 切換密碼顯示/隱藏
                const togglePasswordVisibility = () => {
                    showPassword.value = !showPassword.value;
                    setTimeout(() => lucide.createIcons(), 0);
                };

                const toggleConfirmPasswordVisibility = () => {
                    showConfirmPassword.value = !showConfirmPassword.value;
                    setTimeout(() => lucide.createIcons(), 0);
                };

                // 更新錯誤訊息
                const updateErrorMsg = (errors) => {
                    // 清除之前的錯誤訊息
                    document.querySelectorAll('.input-item p').forEach(p => p.textContent = '');

                    Object.keys(errors).forEach(field => {
                        const errMsg = errors[field];
                        if (errMsg && errMsg.length > 0) {
                            const el = document.querySelector(`p[asp-validation-for="${field}"]`);
                            if (el && field) {
                                el.textContent = errMsg[0];
                            } else if (!field) {
                                console.log('General error:', errMsg[0]);
                            } else {
                                console.log(`Could not find validation element for ${field}`);
                            }
                        }
                    });
                };

                // 表單提交
                const submitForm = async (event) => {
                    event.preventDefault();

                    try {
                        // 獲取表單數據
                        const formData = new FormData(event.target);
                        const token = formData.get('__RequestVerificationToken');

                        const response = await fetch('/api/register', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({
                                UserName: registerForm.value.UserName,
                                Email: registerForm.value.Email,
                                Password: registerForm.value.Password,
                                PasswordConfirm: registerForm.value.PasswordConfirm
                            })
                        });

                        const result = await response.json();

                        if (result.success && result.redirectUrl) {
                            window.location.href = result.redirectUrl;
                        } else if (result.errors) {
                            updateErrorMsg(result.errors);
                        }
                    } catch (error) {
                        console.error('Register error:', error);
                    }
                };

                // 組件掛載後初始化
                onMounted(() => {
                    // 綁定表單數據到 DOM 元素
                    const userNameInput = document.querySelector('input[name="UserName"]');
                    const emailInput = document.querySelector('input[name="Email"]');
                    const passwordInput = document.querySelector('input[name="Password"]');
                    const confirmPasswordInput = document.querySelector('input[name="PasswordConfirm"]');

                    if (userNameInput) {
                        userNameInput.addEventListener('input', (e) => {
                            registerForm.value.UserName = e.target.value;
                        });
                    }

                    if (emailInput) {
                        emailInput.addEventListener('input', (e) => {
                            registerForm.value.Email = e.target.value;
                        });
                    }

                    if (passwordInput) {
                        passwordInput.addEventListener('input', (e) => {
                            registerForm.value.Password = e.target.value;
                        });
                    }

                    if (confirmPasswordInput) {
                        confirmPasswordInput.addEventListener('input', (e) => {
                            registerForm.value.PasswordConfirm = e.target.value;
                        });
                    }

                    // 初始化 Lucide 圖標
                    lucide.createIcons();
                });

                return {
                    showPassword,
                    showConfirmPassword,
                    registerForm,
                    togglePasswordVisibility,
                    toggleConfirmPasswordVisibility,
                    submitForm
                };
            }
        }).mount('#auth-body');
    </script>
}