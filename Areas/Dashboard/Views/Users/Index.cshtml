@{
    ViewData["Title"] = "用戶管理";
}

<div id="adminUser" class="grid h-full w-full grid-cols-4 gap-4">
<<<<<<< HEAD
    <template v-if="isLoading">
        <div class="col-span-4 flex h-[60vh] w-full items-center justify-center">
            <div class="flex flex-col items-center gap-4">
                <img src="~/static/img/Loading.gif" alt="Loading" class="h-16 w-16" />
                <span class="text-gray-700">Loading</span>
            </div>
        </div>
    </template>
    <template v-else>
        <h2 class="col-span-4 text-5xl font-bold text-gray-700">Users Management</h2>
        <!-- 左側欄 -->
        <aside class="col-span-1 flex flex-col gap-8 border-r border-gray-200 bg-white p-8">
            <div class="flex justify-end gap-4">
                <div class="relative w-full">
                    <input type="text" 
                        placeholder="Please enter User name" 
                        class="w-full rounded border bg-gray-50 px-3 py-2 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                        v-model="nameFilterInput"
                        @@keyup.enter="applyNameFilter">
                    <button @@click="applyNameFilter" class="absolute top-1/2 right-4 -translate-y-1/2 cursor-pointer">
                        <i data-lucide="search" class="icon-base"></i>
                    </button>
                </div>
            </div>
            <div class="flex w-full flex-col items-center sm:flex-row sm:items-center sm:justify-between">
                <!-- 左側文字 -->
                <label class="font-medium text-gray-700 sm:whitespace-nowrap">Status</label>

                <!-- Enable,Disable按鈕 -->
                <div class="flex w-full gap-2 sm:w-auto">
                    <button @@click="toggleStatus(1)" :class="['w-full cursor-pointer rounded px-3 py-2 text-sm font-semibold sm:w-auto sm:px-4 sm:py-1 sm:text-base',
                        statusFilter === 1 ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                        Enable
                    </button>
                    <button @@click="toggleStatus(0)" :class="['w-full cursor-pointer rounded px-4 py-1 font-semibold shadow sm:w-auto',
                        statusFilter === 0 ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                        Disable
                    </button>
                </div>
            </div>
            <div class="mt-3 flex w-full flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
                <!-- 左側文字 -->
                <label class="font-medium text-gray-700 sm:whitespace-nowrap">Ban</label>

                <!-- YES / NO 按鈕 -->
                <div class="flex w-full gap-2 sm:w-auto">
                    <button @@click="toggleBanned(true)" :class="['w-full cursor-pointer rounded px-8 py-1 text-sm font-semibold shadow sm:w-auto sm:text-base',
                        bannedFilter === true ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                        Yes
                    </button>
                    <button @@click="toggleBanned(false)" :class="['w-full cursor-pointer rounded px-8 py-1 text-sm font-semibold shadow sm:w-auto sm:text-base',
                        bannedFilter === false ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                        No
                    </button>
                </div>
            </div>
            <div class="flex justify-end gap-4">
                <div class="relative w-full">
                    <input type="text"
                        placeholder="Please enter YYYY-MM-DD"
                        class="w-full rounded border bg-gray-50 px-3 py-2 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                        v-model="createDateInput"
                        @@keyup.enter="applyCreateDateFilter">
                    <button @@click="applyCreateDateFilter" class="absolute top-1/2 right-4 -translate-y-1/2 cursor-pointer">
                        <i data-lucide="search" class="icon-base"></i>
                    </button>
                </div>
            </div>
            <div class="h-40 w-full">
                <calendar-date :value="selectedDate ? formatYMD(selectedDate) : ''" @@change="onCalendarChange" class="cally bg-base-100 border-base-300 rounded-box w-full border shadow-lg">
                    <svg aria-label="Previous" class="size-4 fill-current text-[#161616]" slot="previous" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M15.75 19.5 8.25 12l7.5-7.5"></path></svg>
                    <svg aria-label="Next" class="size-4 fill-current text-[#161616]" slot="next" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path></svg>
                    <calendar-month></calendar-month>
                </calendar-date>
=======
    <h2 class="col-span-4 text-5xl font-bold text-gray-700" data-i18n="UsersManagement"></h2>
    <!-- 左側欄 -->
    <aside class="col-span-1 flex flex-col gap-8 border-r border-gray-200 bg-white p-8">
        <div class="flex justify-end gap-4">
            <div class="relative w-full">
                <input type="text" 
                       data-i18n-placeholder="SearchUserPlaceholder"
                       class="w-full rounded border bg-gray-50 px-3 py-2 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                       v-model="nameFilterInput"
                       @@keyup.enter="applyNameFilter">
                <button @@click="applyNameFilter" class="absolute top-1/2 right-4 -translate-y-1/2 cursor-pointer">
                    <i data-lucide="search" class="icon-base"></i>
                </button>
            </div>
        </div>
        <div class="flex w-full flex-col items-center sm:flex-row sm:items-center sm:justify-between">
            <!-- 左側文字 -->
            <label class="font-medium text-gray-700 sm:whitespace-nowrap" data-i18n="Status"></label>

            <!-- Enable,Disable按鈕 -->
            <div class="flex w-full gap-2 sm:w-auto">
                <button data-i18n="Enable" @@click="toggleStatus(1)" :class="['w-full cursor-pointer rounded px-3 py-2 text-sm font-semibold sm:w-auto sm:px-4 sm:py-1 sm:text-base',
                    statusFilter === 1 ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                    
                </button>
                <button data-i18n="Disable" @@click="toggleStatus(0)" :class="['w-full cursor-pointer rounded px-4 py-1 font-semibold shadow sm:w-auto',
                    statusFilter === 0 ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                    
                </button>
            </div>
        </div>
        <div class="mt-3 flex w-full flex-col gap-2 sm:flex-row sm:items-center sm:justify-between">
            <!-- 左側文字 -->
            <label data-i18n="Ban" class="font-medium text-gray-700 sm:whitespace-nowrap"></label>

            <!-- YES / NO 按鈕 -->
            <div class="flex w-full gap-2 sm:w-auto">
                <button data-i18n="Yes" @@click="toggleBanned(true)" :class="['w-full cursor-pointer rounded px-8 py-1 text-sm font-semibold shadow sm:w-auto sm:text-base',
                    bannedFilter === true ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                    
                </button>
                <button data-i18n="No" @@click="toggleBanned(false)" :class="['w-full cursor-pointer rounded px-8 py-1 text-sm font-semibold shadow sm:w-auto sm:text-base',
                    bannedFilter === false ? 'bg-blue-500 text-white hover:bg-blue-700' : 'bg-gray-200 text-gray-600 hover:bg-gray-300']">
                    
                </button>
            </div>
        </div>
        <div class="flex justify-end gap-4">
            <div class="relative w-full">
                <input type="text"
                       data-i18n-placeholder="SearchDatePlaceholder"
                       class="w-full rounded border bg-gray-50 px-3 py-2 focus:ring-2 focus:ring-blue-200 focus:outline-none"
                       v-model="createDateInput"
                       @@keyup.enter="applyCreateDateFilter">
                <button @@click="applyCreateDateFilter" class="absolute top-1/2 right-4 -translate-y-1/2 cursor-pointer">
                    <i data-lucide="search" class="icon-base"></i>
                </button>
>>>>>>> dev-users
            </div>

<<<<<<< HEAD
        </aside>
        <!-- 右側主表格 -->
        <main class="col-span-3 h-full p-8">
            <div class="h-full w-full rounded-2xl border border-black/10 bg-yellow-50 p-4">
                <table class="table w-full">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>roleText</th>
                            <th>email</th>
                            <th>status</th>
                            <th>createTime</th>
                            <th>lastLoginTime</th>
                            <th>編輯</th>
                            <th>刪除</th>
                        </tr>
                    </thead>
                    <tbody class="text-[14px]"> 
                        <tr v-for="(item,idx) in pagedUsers" :key="item.userId">
                            <td>{{item.userName}}</td>
                            <td>{{item.roleText}}</td>
                            <td>{{item.email}}</td>
                            <td>
                                <template v-if="editingId === item.userId">
                                    <select v-model.number="tempStatus"
                                            class="rounded border px-1 py-0">
                                        <option :value="0">未啟用</option>
                                        <option :value="1">已啟用</option>
                                        <option :value="2">被封禁</option>
                                    </select>
                                </template>
                                <template v-else>
                                    {{ statusText(item.status) }}
                                </template>
=======
    </aside>
    <!-- 右側主表格 -->
    <main class="col-span-3 h-full p-8">
        <div class="h-full w-full rounded-2xl border border-black/10 bg-yellow-50 p-4">
            <table class="table w-full">
                <thead>
                    <tr>
                        @* <th></th> *@
                        <th data-i18n="Name"></th>
                        <th data-i18n="RoleText"></th>
                        <th data-i18n="Email"></th>
                        <th data-i18n="Status"></th>
                        <th data-i18n="CreateTime"></th>
                        <th data-i18n="LastLoginTime"></th>
                        <th data-i18n="Edit"></th>
                        <th data-i18n="Delete"></th>
                    </tr>
                </thead>
                <tbody class="text-[14px]"> 
                    <tr v-for="(item,idx) in pagedUsers" :key="item.userId">
                        @* <td>{{ (pageIndex - 1) * pageSize + idx + 1 }}</td> *@
                        <td>{{item.userName}}</td>
                        <td>{{roleTextI18n(item)}}</td>
                        <td>{{item.email}}</td>
                        <td>
                            <template v-if="editingId === item.userId">
                                <select v-model.number="tempStatus"
                                        class="rounded border px-1 py-0">
                                    <option :value="0" >{{ t('Status_Disabled') }}</option>
                                    <option :value="1" >{{ t('Status_Enabled') }}</option>
                                    <option :value="2" >{{ t('Status_Banned') }}</option>
                                </select>
                            </template>
                            <template v-else>
                                {{ statusText(item.status) }}
                            </template>
>>>>>>> dev-users

                            </td>
                            <td>{{formatDate(item.createTime)}}</td>
                            <td>{{formatDate(item.lastLoginTime)}}</td>

                            <!-- 編輯/確定/取消 -->
                            <td class="w-28 text-center">
                                <template v-if="editingId === item.userId">
                                    <div class="flex items-center justify-center gap-2">
                                        <button @@click ="confirmEdit(item)"
                                                :disabled="updating"
                                                class="cursor-pointer rounded bg-green-600 px-2 py-1 text-white hover:bg-green-700 disabled:opacity-50">
                                            update
                                        </button>
                                        <button @@click ="cancelEdit"
                                                :disabled="updating"
                                                class="cursor-pointer rounded bg-gray-300 px-2 py-1 text-gray-800 hover:bg-gray-400 disabled:opacity-50">
                                            cancel
                                        </button>
                                    </div>
                                </template>
                                <template v-else>
                                    <button @@click ="startEdit(item)"
                                            class="flex cursor-pointer items-center justify-center rounded bg-blue-500 p-1 text-white hover:bg-blue-700">
                                        <!--icon -->
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" stroke="currentColor" stroke-width="2"
                                            stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil-icon lucide-pencil">
                                            <path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" />
                                            <path d="m15 5 4 4" />
                                        </svg>
                                    </button>
                                </template>
                            </td>

                            <td class="w-12 text-center">
                                <button @@click="deleteUser(item.userId)" class="flex cursor-pointer items-center justify-center rounded bg-red-500 p-1 text-white hover:bg-red-700" title="Delete">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-ban-icon lucide-ban">
                                        <path d="M4.929 4.929 19.07 19.071" />
                                        <circle cx="12" cy="12" r="10" />
                                    </svg>
                                </button>
                        </tr>
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="9">
                                <div class="bg-yellow-50 px-4 py-2">
                                    <div class="flex justify-center gap-1">
                                        <button @@click="pageIndex--" :disabled="pageIndex === 1" class="cursor-pointer rounded px-2 py-1 text-gray-500 hover:bg-gray-200">&laquo;</button>

<<<<<<< HEAD
                                        <button v-for="i in totalPages" :key="i"
                                                @@click ="pageIndex = i"
                                                :class="['cursor-pointer rounded px-2 py-1 hover:bg-gray-200', pageIndex === i ? 'bg-blue-100 text-blue-700' : 'text-gray-700 hover:bg-gray-200']">
                                            {{ i }}
                                        </button>
=======
                        @* <td class="w-12 text-center">
                            <button onclick="updateStatus" class="flex cursor-pointer items-center justify-center rounded bg-blue-500 p-1 text-white hover:bg-blue-700" title="Edit">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-pencil-icon lucide-pencil">
                                    <path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z" />
                                    <path d="m15 5 4 4" />
                                </svg>
                            </button>
                        </td> *@
                        <td class="w-12 text-center">
                            <button @@click="deleteUser(item.userId)" class="flex cursor-pointer items-center justify-center rounded bg-red-500 p-1 text-white hover:bg-red-700" title="Delete">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-ban-icon lucide-ban">
                                    <path d="M4.929 4.929 19.07 19.071" />
                                    <circle cx="12" cy="12" r="10" />
                                </svg>
                            </button>
                        </td>
                    </tr>
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="9">
                            <div class="bg-yellow-50 px-4 py-2">
                                <div class="flex justify-center gap-1">
                                    <button @@click="pageIndex--" :disabled="pageIndex === 1" class="cursor-pointer rounded px-2 py-1 text-gray-500 hover:bg-gray-200">&laquo;</button>
>>>>>>> dev-users

                                        <button @@click="pageIndex++" :disabled="pageIndex === totalPages" class="cursor-pointer rounded px-2 py-1 text-gray-500 hover:bg-gray-200">&raquo;</button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tfoot>

                </table>
            </div>
        </main>
    </template>
</div>

<<<<<<< HEAD
@section Scripts {
    <script src="~/js/dashboard/pages/users/users.js" asp-append-version="true"></script>
=======

@section Scripts{
    <script>
        const { createApp, ref, computed, onMounted } = Vue

        const app = createApp({
          setup() {
                    // --- i18n：語系來源（一定要在最前面） ---
                    // 取語系：優先用 uic=，再用 c=，最後預設 zh-TW
                    // 讀取 .AspNetCore.Culture，支援編碼與未編碼兩種格式
            function getCulture() {
            // 先把整個 cookie 字串裡，該名稱的值抓出來
            const m = document.cookie.match(/(?:^|;\s*)\.AspNetCore\.Culture=([^;]+)/);
            if (!m) return 'zh-TW';

            // 可能是 c%3Den-US%7Cuic%3Den-US，要先 decode
            const raw = decodeURIComponent(m[1]); // 例如 "c=en-US|uic=en-US"

            // 從 raw 再取出 c= 後面的文化碼
            const m2 = raw.match(/(?:^|[\s;])c=([^|;]+)/i);
            return m2 ? m2[1] : 'zh-TW';
            }

            const culture = ref(getCulture());   // reactive 語系
            const dictRef = ref({});             // reactive 翻譯字典

                    // --- Debug/全域存取用：把 i18n 狀態掛到 window ---
        window.__i18nState = {
          culture,   // Vue ref，可在 console 用 __i18nState.culture.value 看到目前語系
          dictRef,   // Vue ref，可在 console 看字典鍵值
          t,         // 你的 t()，可以直接試 __i18nState.t('Status_Enabled')
          reload: () => loadTranslationsAndApply() // 需要時可強制重載字典
        };

            

            // 模板/函式通用的 t()：讀 culture.value 來建立依賴
            function t(key) {
                const _ = culture.value;                  // 這行讓使用 t() 的地方會跟著語系變動
                return (dictRef.value?.[key] ?? key);
            }
            //以上是多語系
            const createDateInput = ref("")
            
            //名字篩選用
            const nameFilterInput = ref("")  //輸入框暫存
            const nameFilter = ref("")   //真正篩選用

            //搜尋方法
            const applyNameFilter = () =>{
                nameFilter.value = nameFilterInput.value.trim()
                pageIndex.value = 1
            }

            const users = ref([])
            const pageIndex = ref(1)
            const pageSize = ref(10)

            const editingId = ref(null)
            const tempStatus = ref(0)
            const updating = ref(false)

            //Ban
            const statusFilter = ref(null)  // 1=Enable, 0=Disable
            const bannedFilter = ref(null)  // true=yes, false=no
            // 篩選 + 分頁：把所有條件串在一起，最後一次性 return
            const filteredUsers = computed(() => {
                let arr = users.value.slice()

            // 1) 名稱
                if (nameFilter.value) {
                    const q = nameFilter.value.toLowerCase()
                    arr = arr.filter(u => (u.userName ?? '').toLowerCase().includes(q))
                }

            // 2) Status (0/1)
                if (statusFilter.value !== null) {
                    arr = arr.filter(u => u.status === statusFilter.value)
                }

            // 3) Ban (status===2)
                if (bannedFilter.value !== null) {
                     arr = bannedFilter.value
                        ? arr.filter(u => u.status === 2)   // Yes → 被封禁
                        : arr.filter(u => u.status !== 2)   // No  → 非封禁
                }
                return arr
            })

            const totalPages = computed(() => Math.max(1, Math.ceil(filteredUsers.value.length / pageSize.value)))
            const pagedUsers = computed(() => {
              const start = (pageIndex.value - 1) * pageSize.value
              return filteredUsers.value.slice(start, start + pageSize.value)
            })
            //多語系
            const statusText = computed(() => {
            const isEn = (culture.value || '').toLowerCase().startsWith('en')
            const d = dictRef.value || {}
            const fb = isEn
                ? { 0: 'Disabled', 1: 'Enabled', 2: 'Banned' }
                : { 0: '未啟用',   1: '已啟用',  2: '被封禁' }

                return (value) => ({
                0: d['Status_Disabled'] || fb[0],
                1: d['Status_Enabled']  || fb[1],
                2: d['Status_Banned']   || fb[2],
                    }[value] ?? value)
            })
            //以上多語系
            const formatDate = (datetime) => {
              const date = new Date(datetime)
              return date.toLocaleDateString() + ' ' + date.toLocaleTimeString()
            }
            

            //Status change
            function toggleStatus(v){
                statusFilter.value = (statusFilter.value === v) ? null : v
                bannedFilter.value = null
                pageIndex.value = 1
            }
            //Ban change
            function toggleBanned(v){
                  bannedFilter.value = (bannedFilter.value === v) ? null : v
                  statusFilter.value = null
                  pageIndex.value = 1
            }

            const selectedDate = ref(null)
            const lastYmd = ref(null)

            //轉YYYY-MM-DD字串給後端
            function formatYMD(dt)
            {
                const d = new Date(dt)
                const y = d.getFullYear()
                const m = String(d.getMonth()+1).padStart(2, '0')
                const day = String(d.getDate()).padStart(2, '0')
                return `${y}-${m}-${day}`
            }

            const fetchUsers = async (dateYmd = null) => {
                try {
            const qs = dateYmd ? `?createDate=${dateYmd}` : ''
            const response = await fetch(`/api/DB_Users${qs}`)
                if (!response.ok) throw new Error('API 錯誤')
            const data = await response.json()
            users.value = data
            pageIndex.value = 1
                }catch (error) {
            console.error('載入失敗：', error)
                }
            }
            //月曆 (跟輸入框同步)

            const onCalendarChange = (e) =>{
                const raw = e?.detail?.value ?? e?.target?.value
                if (!raw){
                    createDateInput.value = ""
                    selectedDate.value = null
                    lastYmd.value = null
                    fetchUsers(null)
                    return
                }
                const ymd = formatYMD(new Date(raw))
                if(lastYmd.value === ymd){
                    //點第二次同一天,取消篩選
                    createDateInput.value = null
                    selectedDate.value = null
                    lastYmd.value = null
                    fetchUsers(null)
                }else{
                    //第一天或換一天,設定篩選
                    selectedDate.value = new Date(raw)
                    lastYmd.value = ymd
                    createDateInput.value = ymd //更新輸入框
                    fetchUsers(ymd)
                }
            }

            const deleteUser = (id) => {
                if(!confirm("你確定要刪除嗎?要不要再考慮一下"))return;

                fetch(`/api/ApiUser/${id}`,{
                    method: 'DELETE'
                })
                .then(response => {
                    if(!response.ok)throw new Error("刪除失敗囉")
                    users.value = users.value.filter(u => u.userId !== id)
                })
                .catch(err =>{
                    console.log("刪除錯誤!!");
                });

            }

            const startEdit = (item) => {
                editingId.value = item.userId
                tempStatus.value = item.status
            }

            const cancelEdit = () => {
                editingId.value = null
                tempStatus.value = 0
            }

            const confirmEdit = async (item) => {
                if(updating.value) return
                updating.value = true
                try {
             // API：PUT 更改status狀態
            const res = await fetch(`/api/DB_Users/${item.userId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: tempStatus.value })
            })
            if(!res.ok){
                const text = await res.text()
                throw Error("更新失敗")
            }

            const index = users.value.findIndex(u => u.userId === item.userId)
            if(index > -1)users.value[index].status = tempStatus.value

            cancelEdit()
            }
            catch(err)
            {
                console.error("更新錯誤",err)
                alert("更新失敗:" + err.message)
            }
            finally{
                updating.value = false
            }

            }

            //日期篩選 (手動or按月曆)
            const applyCreateDateFilter = () =>{
                let val = createDateInput.value.trim()
                if(!val){
                    //清除篩選
                    selectedDate.value = null
                    lastYmd.value = null
                    fetchUsers(null)
                    return
                }
            
            //驗證日期
            const dateObj = new Date(val)
            if(isNaN(dateObj)){
                alert("日期格式錯誤!")
                return
            }
            //更新月曆與篩選
                selectedDate.value = dateObj
                lastYmd.value = formatYMD(dateObj)
                fetchUsers(lastYmd.value)
            }
            //多語系
            const ROLE_KEY_BY_RAW = {
                '管理員': 'Role_Admin',
                '一般使用者': 'Role_User',
                'Admin': 'Role_Admin',
                'User': 'Role_User',
            }

            const roleTextI18n = computed(() => {
            const isEn = (culture.value || '').toLowerCase().startsWith('en')
            const d = dictRef.value || {}

            // 語意化 Key → 保底文字（字典缺鍵時用）
            return (item) => {
            const raw = (item.roleText || '').trim()
            const key = ROLE_KEY_BY_RAW[raw]
            if (!key) return raw // 沒對到就顯示原字

            // 先用後端字典，沒有就用保底
            return d[key] || FB_ROLE[key]
                }
            })


            

            // 3) 把翻譯套進 DOM（支援 text、placeholder、title）
            function applyI18n(dict) {
                if (!dict) return;

            document.querySelectorAll("[data-i18n]").forEach(el => {
            const key = el.getAttribute("data-i18n");
                if (dict[key]) el.textContent = dict[key];
            });

            document.querySelectorAll("[data-i18n-placeholder]").forEach(el => {
            const key = el.getAttribute("data-i18n-placeholder");
                if (dict[key]) el.setAttribute("placeholder", dict[key]);
            });

            document.querySelectorAll("[data-i18n-title]").forEach(el => {
            const key = el.getAttribute("data-i18n-title");
                if (dict[key]) el.setAttribute("title", dict[key]);
            });
            }

                // 4) 從後端載入翻譯（不改後端：呼叫 /api/Translation/{culture}）
            async function loadTranslationsAndApply() {
            const c = getCulture();
                try {
            const res = await fetch(`/api/Translation/${c}`, {
              headers: { "Accept": "application/json" },
              cache: "no-store"
            });
            if (!res.ok) throw new Error(`i18n http ${res.status}`);
            const dict = await res.json();

            // 關鍵：更新 reactive 狀態
            dictRef.value = dict;
            culture.value = c;

            // 仍然幫頁面上 data-i18n 的靜態節點套字
            applyI18n(dict);
            } catch (e) {
            console.warn("Load translations failed:", e);
                }
            }
            // window.reloadTranslations = loadTranslationsAndApply; 外部切語言時呼叫

                // 5) Vue 內用的 t()：動態字串（例如 statusText）用這個
                // function t(key) {
                //     const _ = culture.value;    建立依賴
                //     return (window.__i18n?.dict?.[key] ?? key);
                // }
                

                // 6) 如果別處（例如 menu 的 toggleLang）改了語言 cookie，呼叫這個就會重套翻譯
            // window.reloadTranslations = loadTranslationsAndApply;

            onMounted(async () => {
            
            // 先載入翻譯再載入資料，確保初始畫面就有正確文字
            await loadTranslationsAndApply();
            await fetchUsers(null);
            // 監看 cookie 的語系是否改變，有改就重載字典
            let last = culture.value;
            setInterval(() => {
                const cur = getCulture();
                if (cur !== last) {
                    last = cur;
                    loadTranslationsAndApply(); // 更新 dictRef / culture，表格就會重算
                }
            }, 500); // 0.5 秒偵測一次

            });
            //以上多語系
            
            return {
              users,pageIndex,pageSize,totalPages,pagedUsers,
              formatDate,deleteUser,editingId,tempStatus,
              updating,
              statusText,
              startEdit,
              cancelEdit,
              confirmEdit,
              onCalendarChange,
              selectedDate,
              formatYMD,
              statusFilter,
              bannedFilter,
              toggleStatus,
              toggleBanned,
              nameFilterInput,
              nameFilter,
              applyNameFilter,
              createDateInput,
              applyCreateDateFilter,
              roleTextI18n,
              t
            }
          }
        })

        app.mount('#adminUser')
    </script>

>>>>>>> dev-users
}
